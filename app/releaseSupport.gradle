import java.util.regex.Pattern

def GROUP_NAME = "Release Support"

def messageCommit
def tagName
def contentFile
def currentVersionCode
def currentVersionName


def readAppGradleFile = {
    def buildFile = new File("app/build.gradle")
    return buildFile.getText("UTF-8")
}


def getVersions = {
    println("chay ne")
    contentFile = readAppGradleFile()

    def versionCodePattern = "versionCode\\s[\\t]*([^\\n\\r]*)"
    def versionNamePattern = "versionName\\s[\\t]*([^\\n\\r]*)"

    currentVersionCode = parseVersion(versionCodePattern, contentFile)
    currentVersionName = parseVersion(versionNamePattern, contentFile).replaceAll("\"", "")
    tagName = currentVersionName + "." + currentVersionCode

    println("currentVersionCode: " + currentVersionCode)
    println("currentVersionName: " + currentVersionName)
    println(tagName)
}


 def parseVersion(pattern, contentFile) {
    def versionRex = Pattern.compile(pattern, Pattern.MULTILINE).matcher(contentFile)
    def versionValue = ""
    while (versionRex.find()) {
        versionValue = versionRex.group(1)
    }
    return versionValue
}


def commitCode = {
    ['sh', '-c', 'git add app/build.gradle'].execute().text.trim()
    ['sh', '-c', 'git commit -m ' + '\"' + messageCommit + '\"'].execute().text.trim()
}


task increaseVersionCode {
    group GROUP_NAME

    doLast {
        getVersions()

        def newVersionCode = 0

        println "Current versionCode " + currentVersionCode
        println "Current versionName " + currentVersionName

        if (project.hasProperty("versionCodeInput")) {
            if (!versionCodeInput.matches("^[0-9]+\$")) {
                println "Version code is incorrect"
            } else if (versionCodeInput == "0") {
                newVersionCode = Integer.parseInt(currentVersionCode) + 1
            } else {
                newVersionCode = Integer.parseInt(versionCodeInput)
            }
        } else {
            newVersionCode = Integer.parseInt(currentVersionCode) + 1
        }
        if (newVersionCode > 0) {

            buildFile.text = contentFile.replaceFirst("versionCode\\s[\\t]*([0-9]*)", "versionCode " + newVersionCode)
            messageCommit = "Increase version to " + currentVersionName + "." + newVersionCode
            println messageCommit

            commitCode()
        }
    }
}


task increaseVersionName {
    group GROUP_NAME

    doLast {
        getVersions()

        def newVersionName = "1.x.x"
        def major
        def minor
        def patch
        def isVersionNameInputCorrect = true

        println "Current versionCode " + currentVersionCode
        println "Current versionName " + currentVersionName

        def splitVersionName = currentVersionName.split("[.]")
        major = splitVersionName[0]
        minor = splitVersionName[1]
        patch = splitVersionName[2]


        if (project.hasProperty("versionNameInput")) {
            if (!versionNameInput.matches("^[0-9]+.[0-9]+.[0-9]+\$")) {
                println "Version name is incorrect"
                isVersionNameInputCorrect = false
            } else {
                newVersionName = versionNameInput
            }
        } else if (project.hasProperty("type")) {
            if (type == "major") {
                major = Integer.parseInt(major) + 1
                minor = 0
                patch = 0
            } else if (type == "minor") {
                minor = Integer.parseInt(minor) + 1
                patch = 0
            } else if (type == "patch") {
                patch = Integer.parseInt(patch) + 1
                print patch
            }
            newVersionName = major + "." + minor + "." + patch
        }

        if (isVersionNameInputCorrect) {

            buildFile.text = contentFile.replaceFirst("versionName\\s\"[0-9.]*\"", "versionName " + "\"" + newVersionName + "\"")
            messageCommit = "Increase version to " + newVersionName + "." + currentVersionCode
            println messageCommit

            commitCode()
        }
    }
}


task pushCode {
    group GROUP_NAME

    doLast {
        if (project.hasProperty("branch")) {
            def xxx = ['sh', '-c', 'git push origin ' + branch].execute().text.trim()
            println "Commit and push code at branch $branch"
        } else {
            def xxx = ['sh', '-c', 'git push origin'].execute()
            println "Commit and push code at current branch"
        }
    }
}


task createAndPushTag {
    group GROUP_NAME

    doLast {
        getVersion()

        ['sh', '-c', 'git tag ' + tagName].execute().text.trim()

        if (project.hasProperty("isPushTag") && isPushTag == "true") {
            if (project.hasProperty("branch")) {

                println("sjkafhsjadfgasbjfbasd")
//                def sta = "git push origin " + tagName
//                def outputStream = new StringBuffer()
//
//                sta.execute()
//
//                sta.waitForProcessOutput(outputStream, System.err)
//                print(outputStream.toString())

               // ['sh', '-c', 'git push origin ' + tagName].execute().text.trim()
              //  println "Create and push tag at branch $branch"
            } else {
               // println "You must provide branch to push tag"

//                def sta = "sh -c git push origin " + tagName
//                println (sta)
//                def outputStream = new StringBuffer()
//
//                sta.execute()
//
//                sta.waitForProcessOutput(outputStream, System.err)
//                print(outputStream.toString())
            }
        }
    }
}

def excuteGit(cmd){
        print("run this h")
        def proc = cmd.toString().execute()
        def outputStream = new StringBuffer()
        proc.waitForProcessOutput(outputStream, System.err)
        println(outputStream.toString())

}

task teee{
    doLast{
        excuteGit("git add .")
    }
}