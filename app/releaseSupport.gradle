import java.util.regex.Pattern

def messageCommit
def branchPush
def tagName

def readFile = {
    def versionCode = 1
    def versionName = "1.0.0"

    def buildFile = new File("app/build.gradle")
    def contentFile = buildFile.getText("UTF-8")

    //get versionCode
    def versionCodePattern = "versionCode\\s[\\t]*([^\\n\\r]*)"
    def versionCodeRex = Pattern.compile(versionCodePattern, Pattern.MULTILINE).matcher(contentFile)

    while (versionCodeRex.find()) {
        versionCode = versionCodeRex.group(1)
    }

    //get versionName
    def versionNamePattern = "versionName\\s[\\t]*([^\\n\\r]*)"
    def versionNameRex = Pattern.compile(versionNamePattern, Pattern.MULTILINE).matcher(contentFile)

    while (versionNameRex.find()) {
        versionName = versionNameRex.group(1)
    }

    return [contentFile, versionCode, versionName.replaceAll("\"", "")]
}

def pushCode = {
    ['sh', '-c', 'git add .'].execute().text.trim()
    ['sh', '-c', 'git commit -m ' + '\"' + messageCommit + '\"'].execute().text
    ['sh', '-c', 'git push origin ' + branchPush].execute().text

    println "Commit and push code at branch $branchPush"
}

def pushTag = {
    ['sh', '-c', 'git tag ' + tagName].execute().text.trim()
    ['sh', '-c', 'git push origin ' + branchPush].execute().text.trim()

    println "Create and push tag at branch $branchPush"
}

def executeGit = {
    if (project.hasProperty("branch")) {
        branchPush = branch
        if (project.hasProperty("isCreateTag")) {
            pushTag()
        }

        if (project.hasProperty("isPushCode")) {
            pushCode()
        }
    }
}

task increaseVersionCode {
    def versions = readFile()

    def contentFile = versions[0]
    def currentVersionCode = versions[1]
    def currentVersionName = versions[2]

    def newVersionCode = 0

    if (project.hasProperty("versionCodeInput")) {
        newVersionCode = versionCodeInput
    } else {
        newVersionCode = Integer.parseInt(currentVersionCode) + 1
    }

    doLast {
        buildFile.text = contentFile.replaceFirst("versionCode\\s[\\t]*([0-9]*)", "versionCode " + newVersionCode)
        tagName = currentVersionName + "." + newVersionCode
        messageCommit = "Increase version to " + currentVersionName + "." + newVersionCode

        executeGit()
    }
}


task increaseVersionName {
    def versions = readFile()

    def contentFile = versions[0]
    def currentVersionCode = versions[1]
    def currentVersionName = versions[2]
    def newVersionName = "1.x.x"
    def major
    def minor
    def patch

    println currentVersionName
    println currentVersionCode

    def splitVersionName = currentVersionName.split("[.]")
    major = splitVersionName[0]
    minor = splitVersionName[1]
    patch = splitVersionName[2]


    if (project.hasProperty("versionNameInput")) {
        newVersionName = versionNameInput
    } else {
        if (project.hasProperty("major")) {
            major = Integer.parseInt(major) + 1
        } else if (project.hasProperty("patch")) {
            patch = Integer.parseInt(patch) + 1
        } else {
            minor = Integer.parseInt(minor) + 1
        }

        newVersionName = major + "." + minor + "." + patch
    }

    doLast {
        buildFile.text = contentFile.replaceFirst("versionName\\s\"[0-9.]*\"", "versionName " + "\"" + newVersionName + "\"")
        tagName = currentVersionName + "." + currentVersionCode
        messageCommit = "Increase version to " + newVersionName + "." + currentVersionCode

        executeGit()
    }
}
