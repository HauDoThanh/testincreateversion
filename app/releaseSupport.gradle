import java.util.regex.Pattern

def GROUP_NAME = "Release Support"

def messageCommit
def tagName
def contentFile
def currentVersionCode
def currentVersionName

def readGradleFile = {
    def buildFile = new File("app/build.gradle")
    return buildFile.getText("UTF-8")
}


def getVersions = {
    contentFile = readGradleFile()

    def versionCode = 0
    def versionName = "1.0.0"

    //get versionCode
    def versionCodePattern = "versionCode\\s[\\t]*([^\\n\\r]*)"
    def versionCodeRex = Pattern.compile(versionCodePattern, Pattern.MULTILINE).matcher(contentFile)

    while (versionCodeRex.find()) {
        versionCode = versionCodeRex.group(1)
    }

    //get versionName
    def versionNamePattern = "versionName\\s[\\t]*([^\\n\\r]*)"
    def versionNameRex = Pattern.compile(versionNamePattern, Pattern.MULTILINE).matcher(contentFile)

    while (versionNameRex.find()) {
        versionName = versionNameRex.group(1)
    }

    currentVersionCode = versionCode
    currentVersionName = versionName.replaceAll("\"", "")
    tagName = currentVersionName + "." + currentVersionCode
}


def commitCode = {
    ['sh', '-c', 'git add app/build.gradle'].execute().text.trim()
    ['sh', '-c', 'git commit -m ' + '\"' + messageCommit + '\"'].execute().text.trim()
}


task increaseVersionCode {
    group GROUP_NAME
    getVersions()

    def newVersionCode = 0

    doLast {
        println "Current versionName " + currentVersionName
        println "Current versionCode " + currentVersionCode
    }

    if (project.hasProperty("versionCodeInput")) {
        if (!versionCodeInput.matches("^[0-9]+\$")) {
            println "Version code is incorrect"
        } else if (versionCodeInput == "0") {
            newVersionCode = Integer.parseInt(currentVersionCode) + 1
        } else {
            newVersionCode = Integer.parseInt(versionCodeInput)
        }
    } else {
        newVersionCode = Integer.parseInt(currentVersionCode) + 1
    }

    if (newVersionCode > 0) {
        doLast {
            buildFile.text = contentFile.replaceFirst("versionCode\\s[\\t]*([0-9]*)", "versionCode " + newVersionCode)
            messageCommit = "Increase version to " + currentVersionName + "." + newVersionCode
            println messageCommit

            commitCode()
        }
    }
}


task increaseVersionName {
    group GROUP_NAME
    getVersions()

    def newVersionName = "1.x.x"
    def major
    def minor
    def patch
    def isVersionNameInputCorrect = true

    doLast {
        println "Current versionName " + currentVersionName
        println "Current versionCode " + currentVersionCode
    }

    def splitVersionName = currentVersionName.split("[.]")
    major = splitVersionName[0]
    minor = splitVersionName[1]
    patch = splitVersionName[2]


    if (project.hasProperty("versionNameInput")) {
        if (!versionNameInput.matches("^[0-9]+.[0-9]+.[0-9]+\$")) {
            println "Version name is incorrect"
            isVersionNameInputCorrect = false
        } else {
            newVersionName = versionNameInput
        }
    } else if (project.hasProperty("type")) {
        if (type == "major") {
            major = Integer.parseInt(major) + 1
            minor = 0
            patch = 0
        } else if (type == "minor") {
            minor = Integer.parseInt(minor) + 1
            patch = 0
        } else if (type == "patch") {
            patch = Integer.parseInt(patch) + 1
            print patch
        }
        newVersionName = major + "." + minor + "." + patch
    }

    if (isVersionNameInputCorrect) {
        doLast {
            buildFile.text = contentFile.replaceFirst("versionName\\s\"[0-9.]*\"", "versionName " + "\"" + newVersionName + "\"")
            messageCommit = "Increase version to " + newVersionName + "." + currentVersionCode
            println messageCommit

            commitCode()
        }
    }
}


task pushCode {
    group GROUP_NAME

    doLast {
        if (project.hasProperty("branch")) {
            def xxx = ['sh', '-c', 'git push origin ' + branch].execute().text.trim()
            println "Commit and push code at branch $branch"
            xxx.waitForProcessOutput(System.out, System.err)
        } else {
            def xxx =  ['sh', '-c', 'git push origin'].execute()
            println "Commit and push code at current branch"
            print xxx.text
        }
    }
}


task createAndPushTag {
    group GROUP_NAME

    doLast {
        getVersion()

        ['sh', '-c', 'git tag ' + tagName].execute().text.trim()

        if (project.hasProperty("isPushTag") && isPushTag == "true") {
            if (project.hasProperty("branch")) {
                ['sh', '-c', 'git push origin ' + tagName].execute().text.trim()
                println "Create and push tag at branch $branch"
            } else {
                println "You must provide branch to push tag"
            }
        }
    }
}