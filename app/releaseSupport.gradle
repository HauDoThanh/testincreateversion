/****** How to run this script?
 **** Task increaseVersionCode: we have 2 options
 * Input specific versionCode:
 -> Example: ./gradlew increaseVersionCode '-PversionCodeInput=<your number>'

 * Auto increase versionCode one by one:
 -> Example: ./gradlew increaseVersionCode

 * Push code to your branch:
 -> Example: ./gradlew increaseVersionCode '-Pbranch=<your branch>' '-PisPushCode=true'

 * Create and push tag:
 -> Example: ./gradlew increaseVersionCode '-Pbranch=<your branch>' '-PisCreateTag=true'

 * More detail: you can combine multi variable to run task
 -> Example: ./gradlew increaseVersionCode '-PversionCodeInput=<your number>' '-Pbranch=<your branch>' '-PisPushCode=true' '-PisCreateTag=true'
 ./gradlew increaseVersionCode '-Pbranch=<your branch>' '-PisPushCode=true' '-PisCreateTag=true'



 **** Task increaseVersionName
 * Input specific versionName:
 -> Example: ./gradlew increaseVersionName '-PversionNameInput=<your number>'

 * Auto increase major one by one:
 -> Example: ./gradlew increaseVersionName '-Ptype=major'

 * Auto increase minor one by one:
 -> Example: ./gradlew increaseVersionName '-Ptype=minor'

 * Auto increase patch one by one:
 -> Example: ./gradlew increaseVersionName '-Ptype=patch'

 * Push code to your branch:
 -> Example: ./gradlew increaseVersionName '-Pbranch=<your branch>' '-PisPushCode=true'

 * Create and push tag:
 -> Example: ./gradlew increaseVersionName '-Pbranch=<your branch>' '-PisCreateTag=true'

 * More detail: you can combine multi variable to run task
 -> Example: ./gradlew increaseVersionName '-PversionNameInput=<your number>' '-Pbranch=<your branch>' '-PisPushCode=true' '-PisCreateTag=true'
 ./gradlew increaseVersionName '-Ptype=minor' '-Pbranch=<your branch>' '-PisPushCode=true' '-PisCreateTag=true'

 *** Note: if you use both parameter '-PversionCodeInput=<your number>' and '-Ptype=<type>', the script will prioritize for '-PversionNameInput=<your number>'
 */


import java.util.regex.Pattern

def messageCommit
def branchPush
def tagName
def contentFile

def readGradleFile = {
    def buildFile = new File("app/build.gradle")
    return buildFile.getText("UTF-8")
}


def getVersions = {
    contentFile = readGradleFile()

    def versionCode = 1
    def versionName = "1.0.0"

    //get versionCode
    def versionCodePattern = "versionCode\\s[\\t]*([^\\n\\r]*)"
    def versionCodeRex = Pattern.compile(versionCodePattern, Pattern.MULTILINE).matcher(contentFile)

    while (versionCodeRex.find()) {
        versionCode = versionCodeRex.group(1)
    }

    //get versionName
    def versionNamePattern = "versionName\\s[\\t]*([^\\n\\r]*)"
    def versionNameRex = Pattern.compile(versionNamePattern, Pattern.MULTILINE).matcher(contentFile)

    while (versionNameRex.find()) {
        versionName = versionNameRex.group(1)
    }

    return [versionCode, versionName.replaceAll("\"", "")]
}


def pushCode = {
    ['sh', '-c', 'git add .'].execute().text.trim()
    ['sh', '-c', 'git commit -m ' + '\"' + messageCommit + '\"'].execute().text
    ['sh', '-c', 'git push origin ' + branchPush].execute().text

    println "Commit and push code at branch $branchPush"
}

def pushTag = {
    ['sh', '-c', 'git tag ' + tagName].execute().text.trim()
    ['sh', '-c', 'git push origin ' + branchPush].execute().text.trim()

    println "Create and push tag at branch $branchPush"
}

def executeGit = {
    if (project.hasProperty("branch")) {
        branchPush = branch
        if (project.hasProperty("isCreateTag")) {
            pushTag()
        }

        if (project.hasProperty("isPushCode")) {
            pushCode()
        }
    }
}

task increaseVersionCode {
    def versions = getVersions()

    def currentVersionCode = versions[0]
    def currentVersionName = versions[1]
    def newVersionCode = 0

    if (project.hasProperty("versionCodeInput")) {
        if (!versionCodeInput.matches("[0-9]*")) {
            println "Version code incorrect"
        } else {
            newVersionCode = Integer.parseInt(versionCodeInput)
        }
    } else {
        newVersionCode = Integer.parseInt(currentVersionCode) + 1
    }

    if (newVersionCode > 0) {
        doLast {
            buildFile.text = contentFile.replaceFirst("versionCode\\s[\\t]*([0-9]*)", "versionCode " + newVersionCode)
            tagName = currentVersionName + "." + newVersionCode
            messageCommit = "Increase version to " + currentVersionName + "." + newVersionCode
            println messageCommit

            executeGit()
        }
    }
}


task increaseVersionName {
    def versions = getVersions()

    def currentVersionCode = versions[0]
    def currentVersionName = versions[1]
    def newVersionName = "1.x.x"
    def major
    def minor
    def patch
    def isVersionNameInputCorrect = false

    doLast {
        println currentVersionName
        println currentVersionCode
    }

    def splitVersionName = currentVersionName.split("[.]")
    major = splitVersionName[0]
    minor = splitVersionName[1]
    patch = splitVersionName[2]


    if (project.hasProperty("versionNameInput")) {
        if (!versionNameInput.matches("^[0-9]*\\.[0-9]*\\.[0-9]*\$")) {
            println "Version name incorrect"
        } else {
            isVersionNameInputCorrect = true
            newVersionName = versionNameInput
        }
    } else if (project.hasProperty("type")) {
        if (type == "major") {
            major = Integer.parseInt(major) + 1
            minor = 0
            patch = 0
        } else if (type == "minor") {
            minor = Integer.parseInt(minor) + 1
            patch = 0
        } else if (type == "patch") {
            patch = Integer.parseInt(patch) + 1
        }
        newVersionName = major + "." + minor + "." + patch
    }

    if (isVersionNameInputCorrect) {
        doLast {
            buildFile.text = contentFile.replaceFirst("versionName\\s\"[0-9.]*\"", "versionName " + "\"" + newVersionName + "\"")
            tagName = currentVersionName + "." + currentVersionCode
            messageCommit = "Increase version to " + newVersionName + "." + currentVersionCode
            println messageCommit

            executeGit()
        }
    }
}
