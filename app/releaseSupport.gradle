import java.util.regex.Pattern

def GROUP_NAME = "Release Support"

def tagName
def contentFile
def currentVersionCode
def currentVersionName
def versionCodePattern = "versionCode\\s+(\\d+)"
def versionNamePattern = "versionName\\s+\"(\\d+.\\d+.\\d+)\""

def readAppModuleBuildFile = {
    def buildFile = new File("app/build.gradle")
    return buildFile.getText("UTF-8")
}


def getVersions = {
    contentFile = readAppModuleBuildFile()

    currentVersionCode = parseVersion(versionCodePattern, contentFile)
    currentVersionName = parseVersion(versionNamePattern, contentFile)

    tagName = "$currentVersionName.$currentVersionCode"

    println("currentVersionCode: $currentVersionCode")
    println("currentVersionName: $currentVersionName")
    println("tagName: $tagName")
}


def parseVersion(pattern, contentFile) {
    def versionNameMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(contentFile)
    if (versionNameMatcher.find()) {
        return versionNameMatcher.group(1)
    }
    throw new IllegalArgumentException("Version is incorrect")
}


def commitCode(messageCommit) {
    executeGit(['sh', '-c', 'git add .'])
    executeGit(['sh', '-c', 'git commit -m ' + '\"' + messageCommit + '\"'])
}


task increaseVersionCode {
    group GROUP_NAME
    description "This task allow user increase versionCode. By default this task only increase one.\n" +
            "If you want to increase versionCode to specific version you should provided versionCode.\n\n" +
            "Example 1: ./gradlew increaseVersionCode -> increase one for version code\n" +
            "Example 2: ./gradlew increaseVersionCode -PspecificVersionCode=12 -> increase versionCode to 12"

    doLast {
        getVersions()

        def newVersionCode

        if (project.hasProperty("specificVersionCode")) {
            if (!specificVersionCode.matches("^\\d+\$")) {
                throw new InvalidPropertiesFormatException("Version code is incorrect")
            } else if (specificVersionCode == "0") {
                newVersionCode = Integer.parseInt(currentVersionCode) + 1
            } else {
                newVersionCode = Integer.parseInt(specificVersionCode)
            }
        } else {
            newVersionCode = Integer.parseInt(currentVersionCode) + 1
        }
        if (newVersionCode > 0) {

            buildFile.text = contentFile.replaceFirst(versionCodePattern, "versionCode $newVersionCode")
            def messageCommit = "Increase version to $currentVersionName.$newVersionCode"
            println messageCommit

            commitCode(messageCommit)
        }
    }
}


task increaseVersionName {
    group GROUP_NAME
    description "This task allows user increase versionName. They have 2 option parameters: \n" +
            "- specificVersionName: increase versionName to the specific version\n" +
            "- type: increase one of part versionName: major, minor or patch (increase one)\n\n" +
            "** Note: \n" +
            "- If you provide both parameter the task will prioritize for specificVersionName\n" +
            "- If you don't provide any parameter, this task will be increase minor\n" +
            "- After increase versionName this task will be commit code\n\n" +
            "Example 1: ./gradlew increaseVersionName -> increase minor\n" +
            "Example 2: ./gradlew increaseVersionName -PspecificVersionName=3.2.1 -> increase versionName to 3.2.1\n" +
            "Exaplme 3: ./gradlew increaseVersionName -Ppatch=10 -> increase patch to 10"

    doLast {
        getVersions()

        def newVersionName
        def major
        def minor
        def patch
        def isSpecificVersionNameCorrect = true

        def splitVersionName = currentVersionName.split("[.]")
        major = splitVersionName[0]
        minor = splitVersionName[1]
        patch = splitVersionName[2]


        if (!project.hasProperty("specificVersionName") && !project.hasProperty("type")) {
            minor = Integer.parseInt(minor) + 1
            patch = 0
            newVersionName = major + "." + minor + "." + patch
        } else if (project.hasProperty("specificVersionName")) {
            if (!specificVersionName.matches("^[0-9]+.[0-9]+.[0-9]+\$")) {
                isspecificVersionNameCorrect = false
                throw new InvalidPropertiesFormatException("Version name is incorrect")
            } else {
                newVersionName = specificVersionName
            }
        } else if (project.hasProperty("type")) {
            if (type == "major") {
                major = Integer.parseInt(major) + 1
                minor = 0
                patch = 0
            } else if (type == "minor") {
                minor = Integer.parseInt(minor) + 1
                patch = 0
            } else if (type == "patch") {
                patch = Integer.parseInt(patch) + 1
                print patch
            }
            newVersionName = major + "." + minor + "." + patch
        }

        if (isSpecificVersionNameCorrect) {
            buildFile.text = contentFile.replaceFirst(versionNamePattern, "versionName \"$newVersionName\"")
            def messageCommit = "Increase-version-to-$newVersionName.$currentVersionCode"
            println messageCommit

            commitCode(messageCommit)
        }
    }
}


task pushCode {
    group GROUP_NAME
    description "This task allow user push code to specific branch or current branch. By default this\n" +
            "task only push code to current branch if you want to push code to specific branch you\n" +
            "should provided the branch name.\n\n" +
            "Example1: ./gradlew pushCode -Pbranch=Test-App -> Push code to Test-App branch \n" +
            "Example2: ./gradlew pushCode -> Push code to current branch"
    doLast {
        if (project.hasProperty("branch")) {
            executeGit("git push origin $branch")
        } else {
            executeGit("git push")
        }
    }
}


task createAndPushTag {
    group GROUP_NAME
    description "This task allows user create and push tag. By default only create tag, if you want \n" +
            "to push tag to remote you should provide a flag to push\n\n" +
            "Example 1: createAndPushTag -> just create tag\n" +
            "Example 2: createAndPushTag -PisPushTag=true"

    doLast {
        getVersion()

        executeGit("git tag $tagName")

        if (project.hasProperty("isPushTag") && isPushTag == "true") {
            executeGit("git push origin $tagName")
        }
    }
}


def executeGit(cmd) {
    def process = cmd.execute()
    def outputStream = new StringBuffer()
    process.waitForProcessOutput(outputStream, System.err)
}